version: "3"

services:

  pihole:
    container_name: {{ pihole_container_name }}
    hostname: {{ pihole_container_name }}
    image: pihole/pihole:{{ pihole_version }}
    networks:
      - {{ project_network_name }}
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    expose:
      - 80
    environment:
      TZ: {{ timezone }}
      ServerIP: {{ ansible_facts.default_ipv4.address }}
      PIHOLE_DNS_: '{{ pihole_dns_list | join(';') }}'
      AMDIN_EMAIL: "{{ pihole_admin_email }}"
      DNSSEC: "{{ pihole_enable_dnssec | ternary('true', 'false') }}"
      CUSTOM_CACHE_SIZE: {{ pihole_cache_size }}
      WEBUIBOXEDLAYOUT: "{{ pihole_webui_boxed | ternary('boxed', 'traditional') }}"
      WEBTHEME: "{{ pihole_webui_theme }}"
      TEMPERATUREUNIT: "{{ pihole_temperature_unit }}"
    volumes:
      - '{{ pihole_dir }}/etc/pihole:/etc/pihole/'
      - '{{ pihole_dir }}/etc/dnsmasq.d/:/etc/dnsmasq.d/'
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
      - {{ pihole_dns_list[0] | default(1.1.1.1) }}
    restart: {{ project_restart_policy }}
    labels:
      - traefik.enable=true
      - traefik.http.services.{{ pihole_container_name }}.loadbalancer.server.port=80
      - traefik.http.routers.{{ pihole_container_name }}.rule=Host(`{{ domain }}`)
      - traefik.http.routers.{{ pihole_container_name }}.entrypoints=websecure
      - traefik.http.routers.{{ pihole_container_name }}.service={{ pihole_container_name }}
      - traefik.http.routers.{{ pihole_container_name }}.tls.certresolver={{ acme_provider }}

{% if traefik_install %}
  traefik:
    container_name: traefik
    hostname: traefik
    image: traefik:latest
    command:
      - "--api=true"
      - "--providers.docker=true"
      - "--providers.docker.network={{ project_network_name }}"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge=true"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge.provider={{ acme_provider }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.email={{ acme_email }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.storage=/letsencrypt/acme.json"
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% for e in acme_env %}
      - {{ e }}={{ acme_env[e] }}
{% endfor %}
    networks:
      - {{ project_network_name }}
    ports:
      - 80:80
      - 443:443
    expose:
      - 8080
    volumes:
      - {{ project_dir }}/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.{{ domain }}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver={{ acme_provider }}
    restart: {{ project_restart_policy }}

{% endif %}
{% if pihole_exporter_install %}
  pihole_exporter:
    container_name: pihole_exporter
    hostname: pihole_exporter
    image: ekofr/pihole-exporter:{{ pihole_exporter_version }}
    networks:
      - {{ project_network_name }}
    ports:
      - "{{ pihole_exporter_port }}:{{ pihole_exporter_port }}"
    environment:
      PIHOLE_HOSTNAME: 172.20.0.2
      INTERVAL: {{ pihole_exporter_interval }}
      PORT: {{ pihole_exporter_port }}
    restart: {{ project_restart_policy }}

{% endif %}
{% if pagent_install %}
  pagent:
    container_name: pagent
    hostname: pagent
    image: portainer/agent:{{ pagent_version }}
    networks:
      - {{ project_network_name }}
    ports:
      - "9001:9001/tcp"
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: {{ project_restart_policy }}

{% endif %}
{% if node_exporter_install %}
  node_exporter:
    container_name: node_exporter
    hostname: node_exporter
    image: prom/node-exporter:{{ node_exporter_version }}
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    restart: {{ project_restart_policy }}

{% endif %}
networks:
  {{ project_network_name }}:
    external:
      name: {{ project_network_name }}
